name: Build Arch Linux packages

on: workflow_call

jobs:
  init:
    name: Initialize Arch Linux package builds
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find-packages.outputs.matrix }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Find all Arch Linux packages
        id: find-packages
        run: |
          find arch -mindepth 1 -maxdepth 1 -type d \
            | sed 's|^arch/||' \
            | jq -R \
            | jq -cs '{ "package": . }' \
            > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  build:
    name: Build all packages
    runs-on: ubuntu-latest
    needs:
      - init
    strategy:
      matrix: ${{ fromJson(needs.init.outputs.matrix) }}
    container:
      image: 'docker.io/library/archlinux:base-devel'

    steps:
      - name: Prepare container
        run: |
          pacman-key --init
          yes | pacman -Syu
          yes | pacman -S devtools
          useradd -mG wheel builder
          echo 'Defaults lecture="never"' >> /etc/sudoers
          echo '%wheel ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Import necessary GPG keys
        run: |
          cd arch
          for f in $(find . -wholename '*/keys/*' -type f); do
            su builder -c "gpg --import $f"
          done
          for f in $(find . -name '*.keys' -type f); do
            for u in $(cat $f); do
              curl -sSL $u | su builder -c "gpg --import -"
            done
          done

      - name: Build dependent packages
        run: |
          declare -A provides_map
          cd arch
          for d in $(find . -mindepth 1 -type d); do
            unset provides
            source $d/PKGBUILD
            for p in ${provides[@]}; do
              provides_map["$p"]="$d"
            done
          done
          unset depends
          source ${{ matrix.package }}/PKGBUILD
          for d in ${depends[@]}; do
            if [[ -v provides_map["$d"] ]]; then
              MAKEFLAGS="--jobs=$(nproc)" su builder -c "yes | makepkg -si -D ${provides_map[$d]}"
            elif [ -d "$d" ]; then
              MAKEFLAGS="--jobs=$(nproc)" su builder -c "yes | makepkg -si -D $d"
            fi
          done

      - name: Build package
        run: |
          chown -R builder:builder arch
          cd arch/${{ matrix.package }}
          if [ -d keys ]; then
            find keys -type f | xargs gpg --import
          fi
          MAKEFLAGS="--jobs=$(nproc)" su builder -c "yes | makepkg -s"

      - name: Rename package files
        run: |
          cd arch/${{ matrix.package }}
          for f in *.pkg.tar.zst; do
            if [ $f != $(echo $f | jq -sRr @uri ]; then
              mv -v $f $(echo $f | jq -sRr @uri)
            fi
          done

      - name: Uplaod package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-${{ matrix.package }}
          path: arch/${{ matrix.package }}/*.pkg.tar.zst

  # register:
  #   name: Register all packages
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs:
  #     - build
  #   container:
  #     image: 'docker.io/library/archlinux:base-devel'

  #   steps:
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts
  #         pattern: arch-*

  #     - name: Copy all packages into repository directory
  #       run: |
  #         mkdir ./arch
  #         cp ./artifacts/*/*.pkg.tar.zst ./arch

  #     - name: Set up Arch Linux environment
  #       uses: RangHo/setup-arch@v1

  #     - name: Add all packages to the repository
  #       run: |
  #         repo-add \
  #           ./arch/rangho-repository.db.tar.zst ./arch/*.pkg.tar.zst
  #       shell: arch.sh {0}

  #     - name: Upload the resulting repository as artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: arch-unsigned
  #         path: arch

  # sign:
  #   name: Sign the repository
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs:
  #     - register

  #   steps:
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: arch-unsigned

  #     - name: Import GPG keys
  #       uses: crazy-max/ghaction-import-gpg@v6
  #       with:
  #         gpg_private_key: ${{ secrets.RANGHO_REPOSITORY_SIGNING_PGP_PRIVATE }}
  #         passphrase: ${{ secrets.RANGHO_REPOSITORY_SIGNING_PGP_PASSWORD }}

  #     - name: Sign all files in the repository
  #       run: |
  #         cd arch-unsigned
  #         for pkg in *; do
  #           echo ${{ secrets.RANGHO_REPOSITORY_SIGNING_PGP_PASSWORD }} \
  #             | gpg \
  #               --detach-sign \
  #               --no-armor \
  #               --default-key 5B7BDEC59930AB952EBBDEA60F0C772347B79377 \
  #               --pinentry-mode loopback \
  #               --passphrase-fd 0 \
  #               $pkg
  #         done

  #     - name: Upload the resulting repository as artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: arch
  #         path: arch-unsigned
