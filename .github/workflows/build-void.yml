name: Build Void Linux packages

on: workflow_call

jobs:
  init:
    name: Initialize Void Linux package builds
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find-packages.outputs.matrix }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Find all Void Linux packages
        id: find-packages
        run: |
          find void/srcpkgs -mindepth 1 -maxdepth 1 \
            | sed 's|^void/srcpkgs/||' \
            | jq -R \
            | jq -cs '{ "package": . }' \
            > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  build:
    name: Build all packages
    runs-on: ubuntu-latest
    needs:
      - init
    strategy:
      matrix: ${{ fromJson(needs.init.outputs.matrix) }}
    container:
      image: 'ghcr.io/void-linux/void-buildroot-glibc:latest'

    steps:
      - name: Prepare container
        run: |
          xbps-install -Syu || xbps-install -yu
          xbps-install -yu
          xbps-install -y tar

      - name: Checkout void-packages repository
        uses: actions/checkout@v4
        with:
          path: void-packages
          repository: void-linux/void-packages

      - name: Checkout my repository
        uses: actions/checkout@v4
        with:
          path: rangho-packages

      - name: Configure repository
        run: |
          cat rangho-packages/void/common/shlibs >> void-packages/common/shlibs
          for pkg in rangho-packages/void/srcpkgs/*; do
            if [ -e "void-packages/srcpkgs/$(basename $pkg)" ]; then
              rm -rf "void-packages/srcpkgs/$(basename $pkg)"
            fi
            cp -r $pkg void-packages/srcpkgs/
          done
          (
            cd void-packages
            echo XBPS_ALLOW_RESTRICTED=yes >> etc/conf
            echo XBPS_CHROOT_CMD=ethereal >> etc/conf
            echo XBPS_ALLOW_CHROOT_BREAKOUT=yes >> etc/conf
            echo XBPS_MAKEJOBS="$(nproc)" >> etc/conf
            ln -s / masterdir
          )

      - name: Build package
        id: build-package
        run: |
          cd void-packages
          ./xbps-src pkg "${{ matrix.package }}"
          printf "pkgfile=%s-%s_%s.%s.xbps\n" \
            "${{ matrix.package }}" \
            "$(./xbps-src -a x86_64 show "${{ matrix.package }}" | grep 'version' | sed 's/\t//' | cut -d ':' -f 2)" \
            "$(./xbps-src -a x86_64 show "${{ matrix.package }}" | grep 'revision' | sed 's/\t//' | cut -d ':' -f 2)" \
            "$(uname -m)" \
            >> $GITHUB_OUTPUT

      - name: Upload package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: void-${{ matrix.package }}
          path: void-packages/hostdir/binpkgs/${{ steps.build-package.outputs.pkgfile }}

  register:
    name: Register all packages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - build
    env:
      XBPS_ARCH: x86_64
      XBPS_TARGET_ARCH: x86_64

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: void-*

      - name: Install latest version of xbps
        run: |
          curl -L https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz -o xbps.tar.xz
          tar -xJvf xbps.tar.xz
          rm xbps.tar.xz
          echo "$(pwd)/usr/bin" >> $GITHUB_PATH

      - name: Copy all packages into repository directory
        run: |
          mkdir ./void
          cp ./artifacts/*/*.xbps ./void

      - name: Add all packages to the repository
        run: |
          cd void
          for pkg in *.xbps; do
            xbps-rindex --add $pkg
          done

      - name: Sign all packages in the repository
        run: |
          echo "${{ secrets.RANGHO_REPOSITORY_SIGNING_PEM }}" > private.pem
          xbps-rindex \
            --privkey private.pem \
            --sign \
            --signedby "RangHo Repository Signing Key <10833976+RangHo@users.noreply.github.com>" \
            "$(pwd)/void"
          for pkg in ./void/*.xbps; do
            xbps-rindex --privkey private.pem --sign-pkg $pkg
          done

      - name: Clean up repositories
        run: |
          xbps-rindex --clean "$(pwd)/void"
          xbps-rindex --remove-obsoletes "$(pwd)/void"

      - name: Upload the resulting repository as artifact
        uses: actions/upload-artifact@v4
        with:
          name: void
          path: void
